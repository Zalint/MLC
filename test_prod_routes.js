// Test des routes de production
const axios = require('axios');

const PROD_BASE_URL = 'https://matix-livreur-backend.onrender.com';

async function testProductionRoutes() {
  try {
    console.log('üåê Test des routes de production...\n');
    
    // Test 1: Route de sant√©
    console.log('1Ô∏è‚É£ Test route de sant√©...');
    try {
      const healthResponse = await axios.get(`${PROD_BASE_URL}/api/v1/health`);
      console.log('‚úÖ Health check:', healthResponse.status, healthResponse.data);
    } catch (error) {
      console.log('‚ùå Health check failed:', error.response?.status, error.response?.data);
    }
    
    // Test 2: Connexion pour obtenir un token
    console.log('\n2Ô∏è‚É£ Test connexion...');
    let token = null;
    try {
      const loginResponse = await axios.post(`${PROD_BASE_URL}/api/v1/auth/login`, {
        username: 'admin',
        password: 'bonea2024'
      });
      
      if (loginResponse.data.success) {
        token = loginResponse.data.token;
        console.log('‚úÖ Connexion r√©ussie, token obtenu');
      } else {
        console.log('‚ùå Connexion √©chou√©e:', loginResponse.data);
      }
    } catch (error) {
      console.log('‚ùå Erreur connexion:', error.response?.status, error.response?.data);
    }
    
    if (!token) {
      console.log('\n‚ö†Ô∏è Impossible de tester les routes prot√©g√©es sans token');
      return;
    }
    
    // Test 3: Route GPS stats (existant)
    console.log('\n3Ô∏è‚É£ Test route GPS stats (existant)...');
    try {
      const statsResponse = await axios.get(`${PROD_BASE_URL}/api/v1/gps/stats`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ GPS stats:', statsResponse.status, 'Donn√©es re√ßues');
    } catch (error) {
      console.log('‚ùå GPS stats failed:', error.response?.status, error.response?.data);
    }
    
    // Test 4: Route tracking-configs (NOUVELLE)
    console.log('\n4Ô∏è‚É£ Test route tracking-configs (NOUVELLE)...');
    try {
      const configsResponse = await axios.get(`${PROD_BASE_URL}/api/v1/gps/tracking-configs`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ Tracking configs:', configsResponse.status);
      if (configsResponse.data.success) {
        console.log(`   üìä ${configsResponse.data.data.length} configurations trouv√©es`);
      }
    } catch (error) {
      console.log('‚ùå Tracking configs failed:', error.response?.status, error.response?.data);
    }
    
    // Test 5: Route available-livreurs (NOUVELLE)
    console.log('\n5Ô∏è‚É£ Test route available-livreurs (NOUVELLE)...');
    try {
      const livreursResponse = await axios.get(`${PROD_BASE_URL}/api/v1/gps/available-livreurs`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ Available livreurs:', livreursResponse.status);
      if (livreursResponse.data.success) {
        console.log(`   üë• ${livreursResponse.data.data.length} livreurs trouv√©s`);
      }
    } catch (error) {
      console.log('‚ùå Available livreurs failed:', error.response?.status, error.response?.data);
    }
    
    // Test 6: Route daily-trace (NOUVELLE)
    console.log('\n6Ô∏è‚É£ Test route daily-trace (NOUVELLE)...');
    try {
      const traceResponse = await axios.get(`${PROD_BASE_URL}/api/v1/gps/daily-trace/admin/2025-01-18`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚úÖ Daily trace:', traceResponse.status);
    } catch (error) {
      console.log('‚ùå Daily trace failed:', error.response?.status, error.response?.data);
    }
    
    console.log('\nüéØ R√©sum√© des tests:');
    console.log('- Si les routes 4, 5, 6 √©chouent avec 404, le d√©ploiement n\'est pas complet');
    console.log('- Si elles fonctionnent, le probl√®me vient du frontend');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testProductionRoutes(); 