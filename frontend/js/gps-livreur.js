class GpsLivreurManager {
  constructor() {
    this.isTracking = false;
    this.watchId = null;
    this.trackingInterval = null;
    this.settings = {
      updateInterval: 30000, // 30 secondes par d√©faut
      enableTracking: false,
      highAccuracy: true,
      timeout: 5000,        // AM√âLIOR√â: Plus court pour responsivit√©
      maximumAge: 15000     // AM√âLIOR√â: Plus frais pour pr√©cision
    };
    this.lastPosition = null;
    this.permissionStatus = 'unknown'; // 'granted', 'denied', 'prompt', 'unknown'
    // NOUVEAU: Variables pour pr√©cision adaptative
    this.consecutiveAccuratePositions = 0;
    this.lastMovementTime = Date.now();
    this.isStationary = false;
    this.init();
  }

  async init() {
    console.log('üìç Initialisation GPS Livreur...');
    
    // Charger les param√®tres
    await this.loadSettings();
    
    // V√©rifier la compatibilit√© du navigateur
    if (!this.isGeolocationSupported()) {
      this.showError('Votre navigateur ne supporte pas la g√©olocalisation');
      return;
    }

    // Initialiser l'interface
    this.initUI();
    
    // NOUVEAU: Gestion du cycle de vie de l'app
    this.setupAppLifecycleHandlers();
    
    // V√©rifier les permissions
    await this.checkPermissions();
    
    // Auto-d√©marrer si configur√©
    if (this.settings.enableTracking && this.permissionStatus === 'granted') {
      this.startTracking();
    }
  }

  isGeolocationSupported() {
    return 'geolocation' in navigator;
  }

  async loadSettings() {
    try {
      const response = await ApiClient.request('/gps/settings');
      // Mettre √† jour les param√®tres avec la r√©ponse du serveur
      if (response.data) {
        this.settings.enableTracking = response.data.tracking_enabled;
        this.settings.updateInterval = response.data.tracking_interval;
        console.log('üìç Param√®tres GPS charg√©s:', this.settings);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de charger les param√®tres GPS, utilisation des valeurs par d√©faut');
    }
  }

  initUI() {
    // Cr√©er l'interface GPS pour les livreurs
    const gpsContainer = document.getElementById('gps-livreur-interface');
    if (!gpsContainer) {
      console.log('üîç Container GPS livreur non trouv√© - v√©rification DOM...');
      console.log('üìã Profil page existe:', !!document.getElementById('profile-page'));
      console.log('üìã GPS section existe:', !!document.getElementById('gps-livreur-section'));
      return;
    }
    
    console.log('‚úÖ Container GPS livreur trouv√© - initialisation UI...');

    gpsContainer.innerHTML = `
      <div class="gps-livreur-panel">
        <div class="gps-header">
          <h4>üìç Ma Position GPS</h4>
          <div class="gps-status-indicator">
            <span class="status-dot" id="gps-status-dot"></span>
            <span class="status-text" id="gps-status-text">Initialisation...</span>
          </div>
        </div>

        <div class="gps-controls">
          <div class="gps-toggle-container">
            <label class="gps-toggle-label">
              <input type="checkbox" id="gps-toggle" ${this.settings.enableTracking ? 'checked' : ''}>
              <span class="gps-toggle-slider"></span>
              <span class="gps-toggle-text">Partage de position permanent</span>
            </label>
            <small style="color: #666; font-size: 12px; margin-top: 5px; display: block;">
              ‚ú® Une fois activ√©, red√©marre automatiquement √† chaque ouverture de l'app
            </small>
          </div>
          
          <div class="gps-permission-panel" id="gps-permission-panel" style="display: none;">
            <p>üîí Permission de g√©olocalisation requise</p>
            <button id="request-permission-btn" class="btn btn-primary btn-sm">
              üìç Autoriser la g√©olocalisation
            </button>
          </div>
        </div>

        <div class="gps-info-panel">
          <div class="gps-info-row">
            <span class="info-label">üìç Position:</span>
            <span class="info-value" id="current-position">Non disponible</span>
          </div>
          <div class="gps-info-row">
            <span class="info-label">‚è∞ Derni√®re mise √† jour:</span>
            <span class="info-value" id="last-update">Jamais</span>
          </div>
          <div class="gps-info-row">
            <span class="info-label">üéØ Pr√©cision:</span>
            <span class="info-value" id="gps-accuracy">-</span>
          </div>
        </div>

        <div class="gps-alerts" id="gps-alerts" style="display: none;"></div>
      </div>
    `;

    this.bindEvents();
  }

  bindEvents() {
    // Toggle GPS
    const gpsToggle = document.getElementById('gps-toggle');
    if (gpsToggle) {
      gpsToggle.addEventListener('change', async (e) => {
        if (e.target.checked) {
          await this.requestAndStartTracking();
        } else {
          await this.stopTracking();
        }
      });
    }

    // Bouton de permission
    const permissionBtn = document.getElementById('request-permission-btn');
    if (permissionBtn) {
      permissionBtn.addEventListener('click', () => {
        this.requestPermission();
      });
    }
  }

  async checkPermissions() {
    try {
      if ('permissions' in navigator) {
        const permission = await navigator.permissions.query({ name: 'geolocation' });
        this.permissionStatus = permission.state;
        
        permission.addEventListener('change', () => {
          this.permissionStatus = permission.state;
          this.updateUI();
          // Auto-restart si tracking activ√© et permission accord√©e
          if (this.settings.enableTracking && this.permissionStatus === 'granted' && !this.isTracking) {
            this.startTracking();
          }
        });
      } else {
        // Fallback: tester directement avec getCurrentPosition
        console.log('‚ö†Ô∏è Permissions API non disponible, test direct GPS...');
        await this.testDirectGpsAccess();
      }
      
      this.updateUI();
      
      // AM√âLIORATION: Auto-restart agressif si tracking activ√©
      if (this.settings.enableTracking) {
        await this.attemptAutoRestart();
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier les permissions g√©olocalisation');
      
      // AM√âLIORATION: Fallback en cas d'erreur
      if (this.settings.enableTracking) {
        await this.attemptAutoRestart();
      }
    }
  }

  // NOUVEAU: Test direct d'acc√®s GPS
  async testDirectGpsAccess() {
    try {
      console.log('üîç Test direct d\'acc√®s GPS...');
      await this.getCurrentPosition();
      this.permissionStatus = 'granted';
      console.log('‚úÖ GPS accessible directement');
    } catch (error) {
      if (error.code === 1) { // PERMISSION_DENIED
        this.permissionStatus = 'denied';
      } else {
        this.permissionStatus = 'prompt';
      }
      console.log('‚ùå GPS non accessible:', error.message);
    }
  }

  // NOUVEAU: Tentative auto-restart agressif
  async attemptAutoRestart() {
    console.log('üîÑ Tentative auto-restart GPS...');
    
    // Essayer plusieurs approches
    const attempts = [
      () => this.tryDirectStart(),
      () => this.tryWithPermissionRequest(),
      () => this.tryFallbackStart()
    ];

    for (let i = 0; i < attempts.length; i++) {
      try {
        await attempts[i]();
        if (this.isTracking) {
          console.log(`‚úÖ Auto-restart r√©ussi (tentative ${i + 1})`);
          return;
        }
      } catch (error) {
        console.log(`‚ùå Tentative ${i + 1} √©chou√©e:`, error.message);
      }
    }

    console.log('‚ö†Ô∏è Auto-restart impossible, intervention manuelle requise');
  }

  // NOUVEAU: D√©marrage direct
  async tryDirectStart() {
    if (this.permissionStatus === 'granted' || this.permissionStatus === 'unknown') {
      this.startTracking();
    }
  }

  // NOUVEAU: Avec demande de permission
  async tryWithPermissionRequest() {
    if (this.permissionStatus !== 'denied') {
      await this.requestPermission();
      this.startTracking();
    }
  }

  // NOUVEAU: D√©marrage de secours
  async tryFallbackStart() {
    console.log('üÜò Tentative de d√©marrage de secours...');
    // Force le d√©marrage m√™me avec status incertain
    this.permissionStatus = 'granted';
    this.startTracking();
  }

  updateUI() {
    const statusDot = document.getElementById('gps-status-dot');
    const statusText = document.getElementById('gps-status-text');
    const permissionPanel = document.getElementById('gps-permission-panel');
    const gpsToggle = document.getElementById('gps-toggle');

    if (!statusDot || !statusText) return;

    // Mise √† jour du statut
    if (this.isTracking) {
      statusDot.className = 'status-dot online';
      statusText.textContent = 'Actif - Position partag√©e';
    } else if (this.permissionStatus === 'denied') {
      statusDot.className = 'status-dot error';
      statusText.textContent = 'Permission refus√©e';
    } else if (this.permissionStatus === 'granted') {
      statusDot.className = 'status-dot offline';
      statusText.textContent = 'Pr√™t - Position non partag√©e';
    } else {
      statusDot.className = 'status-dot offline';
      statusText.textContent = 'Permission requise';
    }

    // Panneau de permission
    if (permissionPanel) {
      if (this.permissionStatus === 'prompt' || this.permissionStatus === 'unknown') {
        permissionPanel.style.display = 'block';
      } else {
        permissionPanel.style.display = 'none';
      }
    }

    // Toggle activ√©/d√©sactiv√©
    if (gpsToggle) {
      gpsToggle.disabled = this.permissionStatus === 'denied';
    }
  }

  async requestPermission() {
    try {
      this.showInfo('üìç Demande d\'autorisation en cours...');
      
      const position = await this.getCurrentPosition();
      this.permissionStatus = 'granted';
      this.showSuccess('‚úÖ Permission accord√©e !');
      this.updateUI();
      
      return position;
    } catch (error) {
      this.permissionStatus = 'denied';
      this.handleGeolocationError(error);
      this.updateUI();
      throw error;
    }
  }

  async requestAndStartTracking() {
    try {
      if (this.permissionStatus !== 'granted') {
        await this.requestPermission();
      }
      
      // Activer le tracking sur le backend
      await this.enableBackendTracking(true);
      
      this.startTracking();
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marrage du tracking:', error);
      // D√©sactiver le toggle si erreur
      const gpsToggle = document.getElementById('gps-toggle');
      if (gpsToggle) gpsToggle.checked = false;
    }
  }

  startTracking() {
    if (this.isTracking) {
      console.log('üìç Tracking d√©j√† actif');
      return;
    }

    if (this.permissionStatus !== 'granted') {
      this.showError('Permission de g√©olocalisation requise');
      return;
    }

    console.log('üü¢ D√©marrage du tracking GPS...');
    this.isTracking = true;

    // AM√âLIOR√â: Options de g√©olocalisation optimis√©es
    const options = {
      enableHighAccuracy: true,
      timeout: this.settings.timeout,
      maximumAge: this.settings.maximumAge,
      // Options modernes si disponibles
      desiredAccuracy: 10,        // Objectif 10m
      priority: 'high'            // Priorit√© maximale
    };

    console.log('üìç Options GPS utilis√©es:', options);

    // Tracking continu avec gestion d'erreur am√©lior√©e
    this.watchId = navigator.geolocation.watchPosition(
      (position) => this.handlePositionUpdate(position),
      (error) => this.handleGeolocationError(error),
      options
    );

    // AM√âLIOR√â: Envoi adaptatif bas√© sur le mouvement
    this.startAdaptiveTracking();

    this.updateUI();
    this.showSuccess('üìç Partage de position activ√©');
  }

  // NOUVEAU: Tracking adaptatif bas√© sur le mouvement
  startAdaptiveTracking() {
    console.log('üîÑ D√©marrage du tracking adaptatif...');
    
    this.trackingInterval = setInterval(() => {
      this.sendCurrentPosition();
      this.adjustTrackingFrequency();
    }, this.getCurrentInterval());
  }

  // NOUVEAU: Obtenir l'intervalle actuel bas√© sur l'activit√©
  getCurrentInterval() {
    if (this.isStationary) {
      return Math.max(this.settings.updateInterval * 2, 60000); // Maximum 1 minute si stationnaire
    } else {
      return Math.min(this.settings.updateInterval, 15000); // Minimum 15 secondes si en mouvement
    }
  }

  // NOUVEAU: Ajuster la fr√©quence selon l'activit√©
  adjustTrackingFrequency() {
    if (!this.trackingInterval) return;

    const newInterval = this.getCurrentInterval();
    const currentInterval = this.trackingInterval._repeat || this.settings.updateInterval;

    if (Math.abs(newInterval - currentInterval) > 5000) { // Changement significatif
      console.log(`üîÑ Ajustement intervalle: ${currentInterval}ms ‚Üí ${newInterval}ms`);
      
      clearInterval(this.trackingInterval);
      this.trackingInterval = setInterval(() => {
        this.sendCurrentPosition();
        this.adjustTrackingFrequency();
      }, newInterval);
    }
  }

  async stopTracking() {
    if (!this.isTracking) return;

    console.log('üî¥ Arr√™t du tracking GPS...');
    this.isTracking = false;

    if (this.watchId) {
      navigator.geolocation.clearWatch(this.watchId);
      this.watchId = null;
    }

    if (this.trackingInterval) {
      clearInterval(this.trackingInterval);
      this.trackingInterval = null;
    }

    // D√©sactiver le tracking sur le backend
    try {
      await this.enableBackendTracking(false);
    } catch (error) {
      console.error('‚ö†Ô∏è Erreur lors de la d√©sactivation backend:', error);
    }

    this.updateUI();
    this.showInfo('üìç Partage de position d√©sactiv√©');
  }

  handlePositionUpdate(position) {
    const accuracy = position.coords.accuracy;
    
    // FILTRE: Ignorer compl√®tement les positions > 1km de pr√©cision (aberrantes)
    if (accuracy > 1000) {
      console.log(`üö´ Position ignor√©e - pr√©cision aberrante: ¬±${Math.round(accuracy)}m (> 1km)`);
      return; // Ne pas traiter du tout cette position
    }
    
    // D√©terminer si utilisable pour les calculs (‚â§ 100m)
    const isAccurateForCalculations = accuracy <= 100; // Seuil fixe de 100m pour les calculs
    
    // NOUVEAU: D√©tection de mouvement (seulement avec positions pr√©cises pour √©viter les faux positifs)
    if (isAccurateForCalculations) {
      this.detectMovement(position);
      this.consecutiveAccuratePositions++;
    } else {
      console.log(`üìç Position enregistr√©e mais exclue des calculs - pr√©cision: ¬±${Math.round(accuracy)}m (> 100m)`);
      // Reset le compteur si position impr√©cise
      this.consecutiveAccuratePositions = Math.max(0, this.consecutiveAccuratePositions - 1);
    }
    
    // TOUJOURS mettre √† jour la derni√®re position connue (seulement si < 1km)
    this.lastPosition = position;
    
    // Mise √† jour de l'interface
    this.updatePositionDisplay(position);
    
    console.log('üìç Position re√ßue:', {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
      accuracy: `¬±${Math.round(position.coords.accuracy)}m`,
      usedForCalculations: isAccurateForCalculations ? '‚úÖ Oui' : '‚ùå Non (>100m)',
      speed: position.coords.speed ? `${Math.round(position.coords.speed * 3.6)} km/h` : null,
      movement: this.isStationary ? 'Stationnaire' : 'En mouvement'
    });
  }

  // NOUVEAU: D√©tection de mouvement intelligent
  detectMovement(position) {
    if (!this.lastPosition) {
      this.isStationary = false;
      this.lastMovementTime = Date.now();
      return;
    }

    // Calculer la distance depuis la derni√®re position
    const distance = this.calculateDistance(
      this.lastPosition.coords.latitude,
      this.lastPosition.coords.longitude,
      position.coords.latitude,
      position.coords.longitude
    );

    const timeSinceLastPosition = Date.now() - this.lastMovementTime;
    const speed = position.coords.speed || 0;

    // D√©terminer si en mouvement
    const isMoving = distance > 20 || speed > 1; // Plus de 20m ou vitesse > 1 m/s

    if (isMoving) {
      this.isStationary = false;
      this.lastMovementTime = Date.now();
    } else {
      // Consid√©rer comme stationnaire apr√®s 3 minutes sans mouvement
      this.isStationary = timeSinceLastPosition > 180000;
    }

    console.log(`üö∂ Mouvement: distance=${Math.round(distance)}m, vitesse=${Math.round(speed * 3.6)}km/h, stationnaire=${this.isStationary}`);
  }

  // Calcul de distance entre deux points GPS
  calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // Rayon de la Terre en m√®tres
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // Distance en m√®tres
  }

  updatePositionDisplay(position) {
    const positionEl = document.getElementById('current-position');
    const lastUpdateEl = document.getElementById('last-update');
    const accuracyEl = document.getElementById('gps-accuracy');

    if (positionEl) {
      const lat = position.coords.latitude.toFixed(6);
      const lng = position.coords.longitude.toFixed(6);
      positionEl.textContent = `${lat}, ${lng}`;
    }

    if (lastUpdateEl) {
      lastUpdateEl.textContent = new Date().toLocaleTimeString('fr-FR');
    }

    if (accuracyEl) {
      const accuracy = Math.round(position.coords.accuracy);
      const isUsedForCalculations = accuracy <= 100;
      
      // D√©terminer la qualit√© de la pr√©cision
      const precision = accuracy <= 20 ? 'Excellente' : 
                       accuracy <= 50 ? 'Bonne' : 
                       accuracy <= 100 ? 'Correcte' : 
                       accuracy <= 1000 ? 'Faible' : 'Aberrante';
      
      // Indicateur d'utilisation
      let calculationStatus;
      if (accuracy <= 100) {
        calculationStatus = '<span style="color: #28a745;">‚úÖ Utilis√©e pour calculs</span>';
      } else if (accuracy <= 1000) {
        calculationStatus = '<span style="color: #ffc107;">üìù Enregistr√©e seulement</span>';
      } else {
        calculationStatus = '<span style="color: #dc3545;">üö´ Ignor√©e</span>';
      }
      
      accuracyEl.innerHTML = `
        ¬±${accuracy}m 
        <span style="color: ${this.getPrecisionColor(accuracy)};">(${precision})</span><br>
        <small>${calculationStatus}</small>
      `;
    }

    // Ajouter indicateur de mouvement
    this.updateMovementIndicator();
  }

  // AM√âLIOR√â: Couleur selon la pr√©cision avec seuil 1km
  getPrecisionColor(accuracy) {
    if (accuracy <= 20) return '#28a745'; // Vert
    if (accuracy <= 50) return '#ffc107'; // Jaune
    if (accuracy <= 100) return '#fd7e14'; // Orange
    if (accuracy <= 1000) return '#dc3545'; // Rouge
    return '#6c757d'; // Gris pour aberrant
  }

  // NOUVEAU: Mettre √† jour l'indicateur de mouvement
  updateMovementIndicator() {
    let movementEl = document.getElementById('movement-indicator');
    if (!movementEl) {
      // Cr√©er l'indicateur s'il n'existe pas
      const infoPanel = document.querySelector('.gps-info-panel');
      if (infoPanel) {
        const movementRow = document.createElement('div');
        movementRow.className = 'gps-info-row';
        movementRow.innerHTML = `
          <span class="info-label">üö∂ Activit√©:</span>
          <span class="info-value" id="movement-indicator">D√©tection...</span>
        `;
        infoPanel.appendChild(movementRow);
        movementEl = document.getElementById('movement-indicator');
      }
    }

    if (movementEl) {
      if (this.isStationary) {
        movementEl.textContent = 'üõë Stationnaire';
        movementEl.style.color = '#6c757d';
      } else {
        movementEl.textContent = 'üö∂ En mouvement';
        movementEl.style.color = '#28a745';
      }
    }
  }

  async sendCurrentPosition() {
    if (!this.lastPosition || !this.isTracking) return;

    try {
      // IMPORTANT: On envoie seulement les positions < 1km au backend
      // - Positions > 1km = ignor√©es compl√®tement (aberrantes)
      // - Positions 100m-1km = enregistr√©es mais pas pour les calculs
      // - Positions ‚â§ 100m = enregistr√©es ET utilis√©es pour les calculs
      const positionData = {
        latitude: this.lastPosition.coords.latitude,
        longitude: this.lastPosition.coords.longitude,
        accuracy: this.lastPosition.coords.accuracy,
        timestamp: new Date().toISOString(),
        speed: this.lastPosition.coords.speed || null,
        heading: this.lastPosition.coords.heading || null
      };

      await ApiClient.request('/gps/location', { method: 'POST', body: JSON.stringify(positionData) });
      console.log('üìç Position envoy√©e avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur envoi position:', error);
      // Si erreur 403, essayer de r√©activer le tracking
      if (error.message.includes('403')) {
        console.log('üîÑ Tentative de r√©activation du tracking...');
        try {
          await this.enableBackendTracking(true);
        } catch (reactivateError) {
          console.error('‚ùå Impossible de r√©activer le tracking:', reactivateError);
        }
      }
    }
  }

  async enableBackendTracking(enabled) {
    try {
      const response = await ApiClient.request('/gps/toggle-tracking', {
        method: 'POST',
        body: JSON.stringify({ 
          enabled: enabled,
          permission_granted: enabled ? true : null
        })
      });
      
      console.log(`üìç Tracking backend ${enabled ? 'activ√©' : 'd√©sactiv√©'}:`, response);
      this.settings.enableTracking = enabled;
      return response;
    } catch (error) {
      console.error('‚ùå Erreur toggle tracking backend:', error);
      throw error;
    }
  }

  getCurrentPosition() {
    return new Promise((resolve, reject) => {
      const options = {
        enableHighAccuracy: this.settings.highAccuracy,
        timeout: this.settings.timeout,
        maximumAge: this.settings.maximumAge
      };

      navigator.geolocation.getCurrentPosition(resolve, reject, options);
    });
  }

  handleGeolocationError(error) {
    let message = '';
    
    switch (error.code) {
      case error.PERMISSION_DENIED:
        message = 'üîí Permission de g√©olocalisation refus√©e. Veuillez autoriser l\'acc√®s √† votre position dans les param√®tres du navigateur.';
        this.permissionStatus = 'denied';
        break;
      case error.POSITION_UNAVAILABLE:
        message = 'üìç Position non disponible. V√©rifiez que le GPS est activ√©.';
        break;
      case error.TIMEOUT:
        message = '‚è∞ D√©lai d\'attente d√©pass√© pour obtenir la position.';
        break;
      default:
        message = '‚ùå Erreur de g√©olocalisation inconnue.';
        break;
    }

    console.error('‚ùå Erreur GPS:', error);
    this.showError(message);

    // Arr√™ter le tracking en cas d'erreur
    if (this.isTracking) {
      this.stopTracking();
      const gpsToggle = document.getElementById('gps-toggle');
      if (gpsToggle) gpsToggle.checked = false;
    }
  }

  showSuccess(message) {
    this.showAlert(message, 'success');
  }

  showInfo(message) {
    this.showAlert(message, 'info');
  }

  showError(message) {
    this.showAlert(message, 'error');
  }

  showAlert(message, type = 'info') {
    const alertsContainer = document.getElementById('gps-alerts');
    if (!alertsContainer) return;

    const alert = document.createElement('div');
    alert.className = `gps-alert gps-alert-${type}`;
    alert.textContent = message;

    alertsContainer.appendChild(alert);
    alertsContainer.style.display = 'block';

    // Auto-hide apr√®s 5 secondes
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
        if (alertsContainer.children.length === 0) {
          alertsContainer.style.display = 'none';
        }
      }
    }, 5000);
  }

  // M√©thode pour cleanup quand l'utilisateur se d√©connecte
  cleanup() {
    this.stopTracking();
  }

  // NOUVEAU: Gestion du cycle de vie de l'application
  setupAppLifecycleHandlers() {
    console.log('üì± Configuration des gestionnaires de cycle de vie...');
    
    // Quand l'app redevient visible
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è App redevenue visible - v√©rification GPS...');
        this.handleAppBecameVisible();
      } else {
        console.log('üò¥ App cach√©e');
      }
    });

    // Quand la fen√™tre retrouve le focus
    window.addEventListener('focus', () => {
      console.log('üéØ App a retrouv√© le focus - v√©rification GPS...');
      setTimeout(() => this.handleAppBecameVisible(), 1000);
    });

    // D√©tection de retour en ligne
    window.addEventListener('online', () => {
      console.log('üåê Connexion r√©tablie - red√©marrage GPS...');
      if (this.settings.enableTracking && !this.isTracking) {
        this.attemptAutoRestart();
      }
    });
  }

  // NOUVEAU: Gestion quand l'app redevient visible
  async handleAppBecameVisible() {
    console.log('üîÑ V√©rification apr√®s retour en premier plan...');
    
    // Si le tracking devrait √™tre actif mais ne l'est pas
    if (this.settings.enableTracking && !this.isTracking) {
      console.log('‚ö†Ô∏è Tracking devrait √™tre actif mais ne l\'est pas - red√©marrage...');
      
      // Recharger les param√®tres du serveur
      await this.loadSettings();
      
      // Tentative de red√©marrage
      await this.attemptAutoRestart();
    }
    
    // V√©rifier la connexion avec le serveur
    if (this.isTracking) {
      this.verifyServerConnection();
    }
  }

  // NOUVEAU: V√©rification de la connexion serveur
  async verifyServerConnection() {
    try {
      // Test ping vers le serveur
      await ApiClient.request('/gps/settings');
      console.log('‚úÖ Connexion serveur OK');
    } catch (error) {
      console.log('‚ùå Probl√®me connexion serveur, retry automatique...');
      // Programmer un retry
      setTimeout(() => this.verifyServerConnection(), 30000); // 30 secondes
    }
  }
}

// Initialiser pour les livreurs
let gpsLivreurManager;

// Auto-initialisation si l'utilisateur est un livreur
document.addEventListener('DOMContentLoaded', () => {
  // Attendre que l'utilisateur soit connect√©
  const checkUserAndInit = () => {
    if (window.AppState && window.AppState.user && window.AppState.user.role === 'LIVREUR') {
      const gpsInterface = document.getElementById('gps-livreur-interface');
      if (gpsInterface && !window.gpsLivreurManager) {
        try {
          gpsLivreurManager = new GpsLivreurManager();
          console.log('üìç GPS Livreur auto-initialis√© pour', window.AppState.user.username);
        } catch (error) {
          console.error('‚ùå Erreur auto-initialisation GPS:', error);
        }
      }
    }
  };

  // V√©rifier plusieurs fois avec d√©lais croissants
  setTimeout(checkUserAndInit, 1000);
  setTimeout(checkUserAndInit, 3000);
  setTimeout(checkUserAndInit, 5000);
});

// Export pour utilisation externe
window.GpsLivreurManager = GpsLivreurManager; 