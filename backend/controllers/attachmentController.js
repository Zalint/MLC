const Attachment = require('../models/Attachment');
const Order = require('../models/Order');
const multer = require('multer');
const path = require('path');
const {
  loadConfig,
  getUploadPath,
  validateFile,
  checkPermission,
  generateFileName,
  sanitizeFileName,
  ensureDirectory,
  deleteFile,
  getFileExtension
} = require('../utils/attachmentHelper');

let config = null;

// Initialiser la configuration au d√©marrage
(async () => {
  config = await loadConfig();
})();

// Configuration de multer pour l'upload
const storage = multer.memoryStorage(); // On stocke temporairement en m√©moire

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10 MB
    files: 2 // Max 2 fichiers
  }
}).array('attachments', 2);

/**
 * Middleware pour uploader des fichiers
 */
const uploadMiddleware = (req, res, next) => {
  upload(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      if (err.code === 'LIMIT_FILE_SIZE') {
        return res.status(400).json({
          success: false,
          message: 'Fichier trop volumineux. Maximum 10 Mo par fichier.'
        });
      }
      if (err.code === 'LIMIT_FILE_COUNT') {
        return res.status(400).json({
          success: false,
          message: 'Trop de fichiers. Maximum 2 fichiers par commande.'
        });
      }
      return res.status(400).json({
        success: false,
        message: `Erreur d'upload: ${err.message}`
      });
    } else if (err) {
      return res.status(500).json({
        success: false,
        message: 'Erreur lors de l\'upload des fichiers.'
      });
    }
    next();
  });
};

/**
 * Upload des pi√®ces jointes pour une commande
 * POST /api/orders/:orderId/attachments
 */
const uploadAttachments = async (req, res) => {
  try {
    const { orderId } = req.params;
    const files = req.files;
    const userId = req.user?.username || 'unknown';
    const userRole = (req.user?.role || 'livreur').toLowerCase();
    
    console.log('üìé uploadAttachments - User:', req.user?.username, 'Role:', req.user?.role, '‚Üí', userRole);

    if (!config) {
      config = await loadConfig();
    }

    // V√©rifier que des fichiers ont √©t√© envoy√©s
    if (!files || files.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Aucun fichier √† uploader.'
      });
    }

    // R√©cup√©rer la commande
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: 'Commande introuvable.'
      });
    }

    // V√©rifier les permissions
    const hasPermission = checkPermission(userRole, order.created_at, config);
    if (!hasPermission) {
      return res.status(403).json({
        success: false,
        message: 'Vous n\'avez plus l\'autorisation de modifier les pi√®ces jointes (d√©lai de 24h d√©pass√©).'
      });
    }

    // V√©rifier le nombre de fichiers d√©j√† upload√©s
    const existingCount = await Attachment.countByOrderId(orderId);
    const maxFiles = config.attachments.file_limits.max_files_per_order;
    
    if (existingCount + files.length > maxFiles) {
      return res.status(400).json({
        success: false,
        message: `Maximum ${maxFiles} fichiers par commande. Vous avez d√©j√† ${existingCount} fichier(s).`
      });
    }

    // Valider chaque fichier
    for (const file of files) {
      const validation = validateFile(file, config);
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          message: validation.error
        });
      }
    }

    // D√©terminer le chemin de stockage
    const uploadPath = getUploadPath(order);
    await ensureDirectory(uploadPath);

    // Sauvegarder les fichiers
    const uploadedAttachments = [];
    const fs = require('fs').promises;

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const extension = getFileExtension(file.originalname);
      const fileName = generateFileName(orderId, existingCount + i + 1, extension);
      const filePath = path.join(uploadPath, fileName);

      // √âcrire le fichier sur le disque
      await fs.writeFile(filePath, file.buffer);

      // Enregistrer les m√©tadonn√©es en base de donn√©es
      const attachment = await Attachment.create({
        order_id: orderId,
        file_name: fileName,
        original_name: file.originalname,
        file_path: filePath,
        file_type: file.mimetype,
        file_size: file.size,
        uploaded_by: userId
      });

      uploadedAttachments.push(attachment);
    }

    res.status(201).json({
      success: true,
      message: `${files.length} fichier(s) upload√©(s) avec succ√®s.`,
      data: uploadedAttachments
    });

  } catch (error) {
    console.error('Erreur lors de l\'upload des pi√®ces jointes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de l\'upload des pi√®ces jointes.'
    });
  }
};

/**
 * R√©cup√©rer toutes les pi√®ces jointes d'une commande
 * GET /api/orders/:orderId/attachments
 */
const getAttachments = async (req, res) => {
  try {
    const { orderId } = req.params;
    const userRole = (req.user?.role || 'livreur').toLowerCase();

    console.log('üìé getAttachments - OrderID:', orderId);
    console.log('üìé getAttachments - User:', req.user?.username, 'Role:', req.user?.role, '‚Üí', userRole);

    if (!config) {
      config = await loadConfig();
    }

    // R√©cup√©rer la commande
    const order = await Order.findById(orderId);
    if (!order) {
      console.log('‚ùå getAttachments - Commande introuvable:', orderId);
      return res.status(404).json({
        success: false,
        message: 'Commande introuvable.'
      });
    }

    console.log('üìé getAttachments - Commande trouv√©e, created_at:', order.created_at);

    // V√©rifier les permissions de visualisation
    const hasPermission = checkPermission(userRole, order.created_at, config);
    console.log('üìé getAttachments - Permission:', hasPermission, '(role:', userRole, ')');
    
    if (!hasPermission) {
      console.log('‚ùå getAttachments - Permission refus√©e pour role:', userRole);
      return res.status(403).json({
        success: false,
        message: 'Vous n\'avez plus l\'autorisation de voir les pi√®ces jointes (d√©lai de 24h d√©pass√©).'
      });
    }

    // R√©cup√©rer les pi√®ces jointes
    const attachments = await Attachment.findByOrderId(orderId);

    res.json({
      success: true,
      data: attachments
    });

  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des pi√®ces jointes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des pi√®ces jointes.'
    });
  }
};

/**
 * T√©l√©charger une pi√®ce jointe
 * GET /api/orders/attachments/:attachmentId
 */
const downloadAttachment = async (req, res) => {
  try {
    const { attachmentId } = req.params;
    const userRole = (req.user?.role || 'livreur').toLowerCase();
    
    console.log('üìé downloadAttachment - User:', req.user?.username, 'Role:', req.user?.role, '‚Üí', userRole);

    if (!config) {
      config = await loadConfig();
    }

    // R√©cup√©rer la pi√®ce jointe avec les infos de la commande
    const attachment = await Attachment.findByIdWithOrder(attachmentId);
    
    if (!attachment) {
      return res.status(404).json({
        success: false,
        message: 'Pi√®ce jointe introuvable.'
      });
    }

    // V√©rifier les permissions
    const hasPermission = checkPermission(userRole, attachment.order_created_at, config);
    if (!hasPermission) {
      return res.status(403).json({
        success: false,
        message: 'Vous n\'avez plus l\'autorisation d\'acc√©der √† cette pi√®ce jointe.'
      });
    }

    // V√©rifier que le fichier existe
    const fs = require('fs').promises;
    try {
      await fs.access(attachment.file_path);
    } catch {
      return res.status(404).json({
        success: false,
        message: 'Fichier introuvable sur le serveur.'
      });
    }

    // Envoyer le fichier
    res.download(attachment.file_path, attachment.original_name);

  } catch (error) {
    console.error('Erreur lors du t√©l√©chargement de la pi√®ce jointe:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors du t√©l√©chargement.'
    });
  }
};

/**
 * Supprimer une pi√®ce jointe
 * DELETE /api/orders/attachments/:attachmentId
 */
const deleteAttachment = async (req, res) => {
  try {
    const { attachmentId } = req.params;
    const userRole = (req.user?.role || 'livreur').toLowerCase();
    
    console.log('üìé deleteAttachment - User:', req.user?.username, 'Role:', req.user?.role, '‚Üí', userRole);

    if (!config) {
      config = await loadConfig();
    }

    // R√©cup√©rer la pi√®ce jointe avec les infos de la commande
    const attachment = await Attachment.findByIdWithOrder(attachmentId);
    
    if (!attachment) {
      return res.status(404).json({
        success: false,
        message: 'Pi√®ce jointe introuvable.'
      });
    }

    // V√©rifier les permissions
    const hasPermission = checkPermission(userRole, attachment.order_created_at, config);
    if (!hasPermission) {
      return res.status(403).json({
        success: false,
        message: 'Vous n\'avez plus l\'autorisation de supprimer cette pi√®ce jointe (d√©lai de 24h d√©pass√©).'
      });
    }

    // Supprimer le fichier physique
    const fileDeleted = await deleteFile(attachment.file_path);
    if (!fileDeleted) {
      console.warn(`Le fichier ${attachment.file_path} n'a pas pu √™tre supprim√© du disque.`);
    }

    // Supprimer l'entr√©e en base de donn√©es
    await Attachment.delete(attachmentId);

    res.json({
      success: true,
      message: 'Pi√®ce jointe supprim√©e avec succ√®s.'
    });

  } catch (error) {
    console.error('Erreur lors de la suppression de la pi√®ce jointe:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la suppression.'
    });
  }
};

module.exports = {
  uploadMiddleware,
  uploadAttachments,
  getAttachments,
  downloadAttachment,
  deleteAttachment
};

